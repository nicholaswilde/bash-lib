{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"libbash A collection of common bash libraries. TL;DR Installation From within a git repo From outside a git repo From the script directory git submodule add https://github.com/nicholaswilde/libbash From the script directory git clone https://github.com/nicholaswilde/libbash.git Usage myscript.sh #!/usr/bin/env bash DIR = \" $( cd \" $( dirname \" ${ BASH_SOURCE [0] } \" ) \" >/dev/null 2 > & 1 && pwd ) \" # shellcheck source=/dev/null source \" ${ DIR } /libbash/init\" source \" ${ LIBBASH_DIR } /str\" lb_to_upper_all foo Update From the base dir with libbash submodule installed. git submodule update --init --recursive --remote Inspiration Inspiration for this repository has been taken from cyberark/bash-lib and dylanaraps/pure-bash-bible . \u200bLicense \u200b Apache 2.0 License \u200bAuthor \u200bThis project was started in 2022 by Nicholas Wilde .","title":"Home"},{"location":"#libbash","text":"A collection of common bash libraries.","title":"libbash"},{"location":"#tldr","text":"","title":"&nbsp; TL;DR"},{"location":"#installation","text":"From within a git repo From outside a git repo From the script directory git submodule add https://github.com/nicholaswilde/libbash From the script directory git clone https://github.com/nicholaswilde/libbash.git","title":"&nbsp; Installation"},{"location":"#usage","text":"myscript.sh #!/usr/bin/env bash DIR = \" $( cd \" $( dirname \" ${ BASH_SOURCE [0] } \" ) \" >/dev/null 2 > & 1 && pwd ) \" # shellcheck source=/dev/null source \" ${ DIR } /libbash/init\" source \" ${ LIBBASH_DIR } /str\" lb_to_upper_all foo","title":"&nbsp; Usage"},{"location":"#update","text":"From the base dir with libbash submodule installed. git submodule update --init --recursive --remote","title":"&nbsp; Update"},{"location":"#inspiration","text":"Inspiration for this repository has been taken from cyberark/bash-lib and dylanaraps/pure-bash-bible .","title":"&nbsp; Inspiration"},{"location":"#license","text":"\u200b Apache 2.0 License","title":"&nbsp;\u200bLicense"},{"location":"#author","text":"\u200bThis project was started in 2022 by Nicholas Wilde .","title":"&nbsp;\u200bAuthor"},{"location":"CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"CODE_OF_CONDUCT/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"CODE_OF_CONDUCT/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing Guide cook-docs accepts change requests using GitHub pull requests . This document outlines the process so you know what to expect. Developer Certificate of Origin cook-docs uses a Developers Certificate of Origin (DCO) to sign-off that you have the right to contribute the code being contributed. The full text of the DCO reads: Developer Certificate of Origin Version 1.1 Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 1 Letterman Drive Suite D4700 San Francisco, CA, 94129 Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved. Every commit needs to have signoff added to it with a message like: Signed-off-by: Joe Smith <joe.smith@example.com> Git makes doing this fairly straight forward. First, please use your real name (sorry, no pseudonyms or anonymous contributions). If you set your user.name and user.email in your git configuration, you can sign your commit automatically with git commit -s or git commit --signoff . Signed commits in the git log will look something like: Author: Joe Smith <joe.smith@example.com> Date: Thu Feb 2 11 :41:15 2018 -0800 Update README Signed-off-by: Joe Smith <joe.smith@example.com> Notice how the Author and Signed-off-by lines match. If they do not match the PR will be rejected by the automated DCO check. If more than one person contributed to a commit than there can be more than one Signed-off-by line where each line is a signoff from a different person who contributed to the commit. Issues Feature requests, bug reports, and support requests all occur through GitHub issues. If you would like to file an issue, view existing issues, or comment on an issue please engage with issues at https://github.com/nicholaswilde/cook-docs/issues Pull Request All changes to the source code are made through GitHub pull requests . If you would like to make a change to the source, docs, or other component in the repository please open a pull request with the change. If you are unsure if the change will be welcome you may want to file an issue first. The issue can detail the change and you can get feedback from the maintainers prior to starting to make the change. You can find the existing pull requests at https://github.com/nicholaswilde/cook-docs/pulls Versioning Versioning is done per Semantic Versioning 2.0.0 (semver) principles.","title":"Contributing"},{"location":"CONTRIBUTING/#contributing-guide","text":"cook-docs accepts change requests using GitHub pull requests . This document outlines the process so you know what to expect.","title":"Contributing Guide"},{"location":"CONTRIBUTING/#developer-certificate-of-origin","text":"cook-docs uses a Developers Certificate of Origin (DCO) to sign-off that you have the right to contribute the code being contributed. The full text of the DCO reads: Developer Certificate of Origin Version 1.1 Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 1 Letterman Drive Suite D4700 San Francisco, CA, 94129 Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved. Every commit needs to have signoff added to it with a message like: Signed-off-by: Joe Smith <joe.smith@example.com> Git makes doing this fairly straight forward. First, please use your real name (sorry, no pseudonyms or anonymous contributions). If you set your user.name and user.email in your git configuration, you can sign your commit automatically with git commit -s or git commit --signoff . Signed commits in the git log will look something like: Author: Joe Smith <joe.smith@example.com> Date: Thu Feb 2 11 :41:15 2018 -0800 Update README Signed-off-by: Joe Smith <joe.smith@example.com> Notice how the Author and Signed-off-by lines match. If they do not match the PR will be rejected by the automated DCO check. If more than one person contributed to a commit than there can be more than one Signed-off-by line where each line is a signoff from a different person who contributed to the commit.","title":"Developer Certificate of Origin"},{"location":"CONTRIBUTING/#issues","text":"Feature requests, bug reports, and support requests all occur through GitHub issues. If you would like to file an issue, view existing issues, or comment on an issue please engage with issues at https://github.com/nicholaswilde/cook-docs/issues","title":"Issues"},{"location":"CONTRIBUTING/#pull-request","text":"All changes to the source code are made through GitHub pull requests . If you would like to make a change to the source, docs, or other component in the repository please open a pull request with the change. If you are unsure if the change will be welcome you may want to file an issue first. The issue can detail the change and you can get feedback from the maintainers prior to starting to make the change. You can find the existing pull requests at https://github.com/nicholaswilde/cook-docs/pulls","title":"Pull Request"},{"location":"CONTRIBUTING/#versioning","text":"Versioning is done per Semantic Versioning 2.0.0 (semver) principles.","title":"Versioning"},{"location":"about/","text":"About The purpose of the libbash project is to create a collection of bash libraries to centralize common functions that can be shared across multiple projects. That way, if a bug if fixed in a library function, each project doesn't need to be updated manually. Functions are organized into libraries into separate libraries for better organization. Each library may be imported individually in order to reduce the amount of overhead during loading. Some libraries, however, are imported automatically by the init library. Organization Libraries Each library is located in the root of the libbash repository in order to reduce the length of the import path. The downside to this method is that it becomes difficult to determine which files are libraries. Naming Conventions Public Functions Public functions are prefixed with lb_ to help determine which functions are being supplied by libbash . Private Functions Private functions are prefixed with _lb_ and are not meant to be used outside of libbash , even though they can be.","title":"About"},{"location":"about/#about","text":"The purpose of the libbash project is to create a collection of bash libraries to centralize common functions that can be shared across multiple projects. That way, if a bug if fixed in a library function, each project doesn't need to be updated manually. Functions are organized into libraries into separate libraries for better organization. Each library may be imported individually in order to reduce the amount of overhead during loading. Some libraries, however, are imported automatically by the init library.","title":"About"},{"location":"about/#organization","text":"","title":"Organization"},{"location":"about/#libraries","text":"Each library is located in the root of the libbash repository in order to reduce the length of the import path. The downside to this method is that it becomes difficult to determine which files are libraries.","title":"Libraries"},{"location":"about/#naming-conventions","text":"","title":"Naming Conventions"},{"location":"about/#public-functions","text":"Public functions are prefixed with lb_ to help determine which functions are being supplied by libbash .","title":"Public Functions"},{"location":"about/#private-functions","text":"Private functions are prefixed with _lb_ and are not meant to be used outside of libbash , even though they can be.","title":"Private Functions"},{"location":"development/","text":"Development Task Task is used to automate tasks. Note Task needs to be executed in the root of libbash repo. Creating a New Library Task Manual task new-lib LIB = mynewlib Note The new-lib task creates a lib , example , and doc file. cp ./templates/lib.tmpl ./mynewlib Templates Template files exist to make it easier to create new files. Template files end with the tmpl file extension. Examples Example scripts exist to demonstrate how to use the libraries and functions Note Example scripts need to be ran inside of the examples directory. Example libbash/examples$ ./logging.sh Unit Tests bats-core is used to automate the testing of the libraries. Task Manual Run all tests task test Run a single test task test-lib LIB = logging Run all tests ./test/bats/bin/bats --tap test Run a single test ./test/bats/bin/bats ./test/logging.bats","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#task","text":"Task is used to automate tasks. Note Task needs to be executed in the root of libbash repo.","title":"Task"},{"location":"development/#creating-a-new-library","text":"Task Manual task new-lib LIB = mynewlib Note The new-lib task creates a lib , example , and doc file. cp ./templates/lib.tmpl ./mynewlib","title":"Creating a New Library"},{"location":"development/#templates","text":"Template files exist to make it easier to create new files. Template files end with the tmpl file extension.","title":"Templates"},{"location":"development/#examples","text":"Example scripts exist to demonstrate how to use the libraries and functions Note Example scripts need to be ran inside of the examples directory. Example libbash/examples$ ./logging.sh","title":"Examples"},{"location":"development/#unit-tests","text":"bats-core is used to automate the testing of the libraries. Task Manual Run all tests task test Run a single test task test-lib LIB = logging Run all tests ./test/bats/bin/bats --tap test Run a single test ./test/bats/bin/bats ./test/logging.bats","title":"Unit Tests"},{"location":"installation/","text":"Installation libbash can be installed as a git submodule in the directory with the script for ease of updating. Project layout myproject/ \u251c\u2500 libbash/ \u2514\u2500 myscript.sh From inside a git repo From outside a git repo git submodule add https://github.com/nicholaswilde/libbash git clone https://github.com/nicholaswilde/libbash.git Update From the base dir with libbash submodule installed. Task Manual task update git submodule update --init --recursive --remote Automatic Update To keep libbash up-to-date with the latest version of of the libraries, the Dependabot GitHub app can be used. The checks daily if there are updates in any submodules. If it finds any update in the libraries, it will create a PR to update the libraries to the latest versions. Setup Dependabot Enable Dependabot in your repository by clicking Enable Dependabot button under Insights > Dependency Graph > Dependabot settings of your repository. For more information please check GitHub Documentation . Create a dependabot.yml file in the .github folder of your repository with the following content: .github/dependabot.yml --- # Update dependencies version : 2 updates : # Update the git submodules - package-ecosystem : \"gitsubmodule\" directory : \"/\" schedule : interval : \"daily\" labels : - \"dependencies\" - \"automerge\" You are all set. Now, dependabot will check for sub-module update daily. It will create a PR to your site if it finds any update in the theme. To know more about the configuration options of Dependabot, please visit here .","title":"Installation"},{"location":"installation/#installation","text":"libbash can be installed as a git submodule in the directory with the script for ease of updating. Project layout myproject/ \u251c\u2500 libbash/ \u2514\u2500 myscript.sh From inside a git repo From outside a git repo git submodule add https://github.com/nicholaswilde/libbash git clone https://github.com/nicholaswilde/libbash.git","title":"Installation"},{"location":"installation/#update","text":"From the base dir with libbash submodule installed. Task Manual task update git submodule update --init --recursive --remote","title":"Update"},{"location":"installation/#automatic-update","text":"To keep libbash up-to-date with the latest version of of the libraries, the Dependabot GitHub app can be used. The checks daily if there are updates in any submodules. If it finds any update in the libraries, it will create a PR to update the libraries to the latest versions.","title":"Automatic Update"},{"location":"installation/#setup-dependabot","text":"Enable Dependabot in your repository by clicking Enable Dependabot button under Insights > Dependency Graph > Dependabot settings of your repository. For more information please check GitHub Documentation . Create a dependabot.yml file in the .github folder of your repository with the following content: .github/dependabot.yml --- # Update dependencies version : 2 updates : # Update the git submodules - package-ecosystem : \"gitsubmodule\" directory : \"/\" schedule : interval : \"daily\" labels : - \"dependencies\" - \"automerge\" You are all set. Now, dependabot will check for sub-module update daily. It will create a PR to your site if it finds any update in the theme. To know more about the configuration options of Dependabot, please visit here .","title":"Setup Dependabot"},{"location":"usage/","text":"Usage Script Task Manual From the libbash root dir task new-script SCRIPT = myscript mv ./myscript.sh /to/myproject/myscript.sh Note Task automatically adds an sh file extension to the script filename. myscript.sh #!/usr/bin/env bash DIR = \" $( cd \" $( dirname \" ${ BASH_SOURCE [0] } \" ) \" >/dev/null 2 > & 1 && pwd ) \" # shellcheck source=/dev/null source \" ${ DIR } /libbash/init\" source \" ${ LIBBASH_DIR } /logging\" lb_infoln \"infoln test\" Environmental Variables Environmental variables are used to set some options for the library. They can be set a few different ways. Script Runtime Environment #!/usr/bin/env bash DIR = \" $( cd \" $( dirname \" ${ BASH_SOURCE [0] } \" ) \" >/dev/null 2 > & 1 && pwd ) \" source \" ${ DIR } /libbash/init\" source ${ LIBBASH_DIR } /script FOO = BAR ... FOO = BAR ./myscript.sh FOO = BAR ./myscript.sh Examples Example scripts exist to demonstrate how to use the libraries and functions Note Example scripts need to be ran inside of the examples directory. Task Manual task example EXAMPLE = logging cd examples ./logging.sh","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#script","text":"Task Manual From the libbash root dir task new-script SCRIPT = myscript mv ./myscript.sh /to/myproject/myscript.sh Note Task automatically adds an sh file extension to the script filename. myscript.sh #!/usr/bin/env bash DIR = \" $( cd \" $( dirname \" ${ BASH_SOURCE [0] } \" ) \" >/dev/null 2 > & 1 && pwd ) \" # shellcheck source=/dev/null source \" ${ DIR } /libbash/init\" source \" ${ LIBBASH_DIR } /logging\" lb_infoln \"infoln test\"","title":"Script"},{"location":"usage/#environmental-variables","text":"Environmental variables are used to set some options for the library. They can be set a few different ways. Script Runtime Environment #!/usr/bin/env bash DIR = \" $( cd \" $( dirname \" ${ BASH_SOURCE [0] } \" ) \" >/dev/null 2 > & 1 && pwd ) \" source \" ${ DIR } /libbash/init\" source ${ LIBBASH_DIR } /script FOO = BAR ... FOO = BAR ./myscript.sh FOO = BAR ./myscript.sh","title":"Environmental Variables"},{"location":"usage/#examples","text":"Example scripts exist to demonstrate how to use the libraries and functions Note Example scripts need to be ran inside of the examples directory. Task Manual task example EXAMPLE = logging cd examples ./logging.sh","title":"Examples"},{"location":"libraries/all/","text":"all A library to import all libraries. Examples: 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /all\" function main () { s = $( lb_repo_root ) printf \"lb_repo_root: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in all 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" libs =() # Get an array of all libraries for f in \" ${ LIBBASH_DIR } \" /* ; do [[ -f \" ${ f } \" ]] && \\ [[ \" ${ f } \" ! = * \"init\" ]] && \\ [[ \" ${ f } \" ! = * \"all\" ]] && \\ [[ \" ${ f } \" ! = * \"helpers\" ]] && \\ [[ \" ${ f } \" ! = * \"logging\" ]] && \\ [[ $( \\h ead \" ${ f } \" -n1 ) == \"#!/usr/bin/env bash\" ]] && \\ libs +=( \" ${ f } \" ) done # Load all libraries for lib in \" ${ libs [@] } \" ; do if [[ -r \" ${ lib } \" ]] && [[ -f \" ${ lib } \" ]] ; then # shellcheck source=/dev/null source \" ${ lib } \" fi done","title":"all"},{"location":"libraries/all/#all","text":"A library to import all libraries. Examples: 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /all\" function main () { s = $( lb_repo_root ) printf \"lb_repo_root: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in all 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" libs =() # Get an array of all libraries for f in \" ${ LIBBASH_DIR } \" /* ; do [[ -f \" ${ f } \" ]] && \\ [[ \" ${ f } \" ! = * \"init\" ]] && \\ [[ \" ${ f } \" ! = * \"all\" ]] && \\ [[ \" ${ f } \" ! = * \"helpers\" ]] && \\ [[ \" ${ f } \" ! = * \"logging\" ]] && \\ [[ $( \\h ead \" ${ f } \" -n1 ) == \"#!/usr/bin/env bash\" ]] && \\ libs +=( \" ${ f } \" ) done # Load all libraries for lib in \" ${ libs [@] } \" ; do if [[ -r \" ${ lib } \" ]] && [[ -f \" ${ lib } \" ]] ; then # shellcheck source=/dev/null source \" ${ lib } \" fi done","title":"all"},{"location":"libraries/checks/","text":"checks A library of checks. lb_command_exists command Return 0 if command exists. Parameters: Name Type Description Default command string The command to check for required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } lb_file_exists file Return 0 if file exists. Parameters: Name Type Description Default file string The file to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } lb_dir_exists dir Return 0 if dir exists. Parameters: Name Type Description Default dir string The directory to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } lb_is_null var Return 0 if var is null. Parameters: Name Type Description Default var string The var to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } lb_is_int var Return 0 if a var is an integer. Parameters: Name Type Description Default var string The var to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } lb_is_float var Return 0 if a var is a float. Parameters: Name Type Description Default var string The var to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } Note A decimal point with no leading number, such as 1. , returns 1 . lb_is_bool var Return 0 if a var is a boolean. Parameters: Name Type Description Default var string The var to check for required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } Note 1 is returned if the var is blank or upper case ( TRUE / FALSE ) lb_contains var substring Return 0 if a var contains substring . Parameters: Name Type Description Default var string The var to check in for substring required substring string The substring to check for in var required string Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" array Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } Note var can be both a string or an array . When checking in an array , use the ${arr[*]} parameter expansion. lb_starts_with var substring Return 0 if a var starts with substring . Parameters: Name Type Description Default var string The var to check at teh start for substring required substring string The substring to check for at the start of var required string Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" array Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } Note var can be both a string or an array . When checking in an array , use the ${arr[*]} parameter expansion. If var is an array, the function checks if the first element is substring . lb_ends_with var substring Return 0 if a var ends with substring . Parameters: Name Type Description Default var string The var to check the end for substring required substring string The substring to check for at the end of var required string Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" array Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } Note var can be both a string or an array . When checking in an array , use the ${arr[*]} parameter expansion. If var is an array, the function checks if the last element is substring .","title":"checks"},{"location":"libraries/checks/#checks","text":"A library of checks.","title":"checks"},{"location":"libraries/checks/#lb_command_exists-command","text":"Return 0 if command exists. Parameters: Name Type Description Default command string The command to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] }","title":"lb_command_exists command"},{"location":"libraries/checks/#lb_file_exists-file","text":"Return 0 if file exists. Parameters: Name Type Description Default file string The file to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] }","title":"lb_file_exists file"},{"location":"libraries/checks/#lb_dir_exists-dir","text":"Return 0 if dir exists. Parameters: Name Type Description Default dir string The directory to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] }","title":"lb_dir_exists dir"},{"location":"libraries/checks/#lb_is_null-var","text":"Return 0 if var is null. Parameters: Name Type Description Default var string The var to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] }","title":"lb_is_null var"},{"location":"libraries/checks/#lb_is_int-var","text":"Return 0 if a var is an integer. Parameters: Name Type Description Default var string The var to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] }","title":"lb_is_int var"},{"location":"libraries/checks/#lb_is_float-var","text":"Return 0 if a var is a float. Parameters: Name Type Description Default var string The var to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } Note A decimal point with no leading number, such as 1. , returns 1 .","title":"lb_is_float var"},{"location":"libraries/checks/#lb_is_bool-var","text":"Return 0 if a var is a boolean. Parameters: Name Type Description Default var string The var to check for required Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } Note 1 is returned if the var is blank or upper case ( TRUE / FALSE )","title":"lb_is_bool var"},{"location":"libraries/checks/#lb_contains-var-substring","text":"Return 0 if a var contains substring . Parameters: Name Type Description Default var string The var to check in for substring required substring string The substring to check for in var required string Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" array Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } Note var can be both a string or an array . When checking in an array , use the ${arr[*]} parameter expansion.","title":"lb_contains var substring"},{"location":"libraries/checks/#lb_starts_with-var-substring","text":"Return 0 if a var starts with substring . Parameters: Name Type Description Default var string The var to check at teh start for substring required substring string The substring to check for at the start of var required string Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" array Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } Note var can be both a string or an array . When checking in an array , use the ${arr[*]} parameter expansion. If var is an array, the function checks if the first element is substring .","title":"lb_starts_with var substring"},{"location":"libraries/checks/#lb_ends_with-var-substring","text":"Return 0 if a var ends with substring . Parameters: Name Type Description Default var string The var to check the end for substring required substring string The substring to check for at the end of var required string Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" array Examplesusr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /checks\" function check_command (){ if lb_command_exists \" ${ 1 } \" ; then printf '\"%s\" command exists\\n' \" ${ 1 } \" else printf '\"%s\" command does not exist\\n' \" ${ 1 } \" fi } function check_file (){ if lb_file_exists \" ${ 1 } \" ; then printf '\"%s\" file exists\\n' \" ${ 1 } \" else printf '\"%s\" file does not exist\\n' \" ${ 1 } \" fi } function check_dir (){ if lb_dir_exists \" ${ 1 } \" ; then printf '\"%s\" dir exists\\n' \" ${ 1 } \" else printf '\"%s\" dir does not exist\\n' \" ${ 1 } \" fi } function check_var (){ if lb_is_null \" ${ 1 } \" ; then printf '\"%s\" var is null\\n' \"FOO\" else printf '\"%s\" var is not null\\n' \"LIBBASH_DIR\" fi } function check_int (){ if lb_is_int \" ${ 1 } \" ; then printf '\"%s\" is an int\\n' \" ${ 1 } \" else printf '\"%s\" is not an int\\n' \" ${ 1 } \" fi } function check_float (){ if lb_is_float \" ${ 1 } \" ; then printf '\"%s\" is a float\\n' \" ${ 1 } \" else printf '\"%s\" is not a float\\n' \" ${ 1 } \" fi } function check_bool (){ if lb_is_bool \" ${ 1 } \" ; then printf '\"%s\" is a bool\\n' \" ${ 1 } \" else printf '\"%s\" is not a bool\\n' \" ${ 1 } \" fi } function check_contain (){ if lb_contains \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" contains \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not contain \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_starts_with (){ if lb_starts_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" starts with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not start with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_ends_with (){ if lb_ends_with \" ${ 1 } \" \" ${ 2 } \" ; then printf '\"%s\" ends with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" else printf '\"%s\" does not end with \"%s\"\\n' \" ${ 1 } \" \" ${ 2 } \" fi } function check_commands (){ check_command \"foo\" check_command \"ls\" } function check_files (){ check_file \" ${ LIBBASH_DIR } /foo\" check_file \" ${ LIBBASH_DIR } /README.md\" } function check_dirs (){ check_dir \" ${ LIBBASH_DIR } /foo\" check_dir \" ${ LIBBASH_DIR } \" } function check_vars (){ FOO = \"\" check_var \" ${ FOO } \" check_var \" ${ LIBBASH_DIR } \" } function check_ints (){ check_int 1 check_int 11 check_int -1 check_int -11 check_int 1 .1 check_int 12 .12 check_int \"foo\" } function check_floats (){ check_float 1 check_float 12 check_float -1 check_float -12 check_float 12 .12 check_float -12.12 check_float .12 check_float 0 .12 check_float -.12 check_float 1 . check_float \"foo\" } function check_bools (){ check_bool 0 check_bool 1 check_bool 2 check_bool -0 check_bool -1 check_bool true check_bool TRUE check_bool false check_bool FALSE check_bool \"true\" check_bool \"false\" check_bool \"foo\" check_bool \"\" } function check_str_contains (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_contain \" ${ string } \" \"foo\" check_contain \" ${ string } \" \"bar\" check_contain \" ${ string } \" \"baz\" } function check_arr_contains (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_contain \" ${ arr [*] } \" \"foo\" check_contain \" ${ arr [*] } \" \"bar\" check_contain \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"baz\" } function check_str_starts_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_starts_with \" ${ string } \" \"foo\" check_starts_with \" ${ string } \" \"bar\" } function check_arr_starts_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_starts_with \" ${ arr [*] } \" \"foo\" check_starts_with \" ${ arr [*] } \" \"bar\" } function check_str_ends_with (){ string = \"foo bar\" printf \"str: %s\\n\" \" ${ string } \" check_ends_with \" ${ string } \" \"foo\" check_ends_with \" ${ string } \" \"bar\" } function check_arr_ends_with (){ arr =( \"foo\" \"bar\" ) printf \"arr: %s\\n\" \" ${ arr [*] } \" check_ends_with \" ${ arr [*] } \" \"foo\" check_ends_with \" ${ arr [*] } \" \"bar\" } function main () { check_commands check_files check_dirs check_vars check_ints check_floats check_bools check_str_contains check_arr_contains check_str_starts_with check_arr_starts_with check_str_ends_with check_arr_ends_with } main \" ${ @ } \" Show source code in checks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Check if command exists function lb_command_exists (){ lb_check_args_num \" ${ @ } \" 1 command -v \" ${ 1 } \" & > /dev/null } # Check if file exists function lb_file_exists (){ lb_check_args_num \" ${ @ } \" 1 [ -f \" ${ 1 } \" ] } # Check is variable is null function lb_is_null { lb_check_args_num \" ${ @ } \" 1 [ -z \" ${ 1 } \" ] } # Checkifdir exists function lb_dir_exists () { lb_check_args_num \" ${ @ } \" 1 [ -d \" ${ 1 } \" ] } function lb_is_int () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/2210386/1061279 [[ \" ${ 1 } \" = ~ ^-? [ 0 -9 ] +$ ]] } function lb_is_float () { lb_check_args_num \" ${ @ } \" 1 # https://stackoverflow.com/a/12643073/1061279 [[ \" ${ 1 } \" = ~ ^ [ +- ] ? ([ 0 -9 ] * [ . ]) ? [ 0 -9 ] +$ ]] } function lb_is_bool () { lb_check_args_num \" ${ @ } \" 1 case ${ 1 } in \"true\" | 1 | 0 | \"false\" ) return 0 ;; * ) return 1 ;; esac } function lb_contains (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" * ]] } function lb_starts_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == \" ${ 2 } \" * ]] } function lb_ends_with (){ lb_check_args_num \" ${ @ } \" 2 [[ \" ${ 1 } \" == * \" ${ 2 } \" ]] } Note var can be both a string or an array . When checking in an array , use the ${arr[*]} parameter expansion. If var is an array, the function checks if the last element is substring .","title":"lb_ends_with var substring"},{"location":"libraries/conv/","text":"conv A library of conversion related functions. lb_hex_to_rgb hex Return an rgb number from a hexidecimal number. Parameters: Name Type Description Default hex hex hexidecimal number to be converted to rgb required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /conv\" function main () { hex = \"#FFFFFF\" printf 'hex: %s\\n' \" ${ hex } \" s = $( lb_hex_to_rgb \" ${ hex } \" ) printf 'lb_hex_to_rgb: %s\\n' \" ${ s } \" rgb =( 255 255 255 ) printf 'rgb: %s\\n' \" ${ rgb [@] } \" s = $( lb_rgb_to_hex \" ${ rgb [@] } \" ) printf 'lb_rgb_to_hex: %s\\n' \" ${ s } \" } main \" ${ @ } \" Show source code in conv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_hex_to_rgb () { lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 / \\# } \" (( r = 16 #${_:0:2},g=16#${_:2:2},b=16#${_:4:2})) printf '%s\\n' \" $r $g $b \" } function lb_rgb_to_hex () { lb_check_args_num \" ${ @ } \" 3 printf '#%02x%02x%02x\\n' \" $1 \" \" $2 \" \" $3 \" } lb_rgb_to_hex r g b Return a lower case hexidecimal number prefixed with a pound symbol. Parameters: Name Type Description Default r int red value from 0 to 255 required g int green value from 0 to 255 required b int blue value from 0 to 255 required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /conv\" function main () { hex = \"#FFFFFF\" printf 'hex: %s\\n' \" ${ hex } \" s = $( lb_hex_to_rgb \" ${ hex } \" ) printf 'lb_hex_to_rgb: %s\\n' \" ${ s } \" rgb =( 255 255 255 ) printf 'rgb: %s\\n' \" ${ rgb [@] } \" s = $( lb_rgb_to_hex \" ${ rgb [@] } \" ) printf 'lb_rgb_to_hex: %s\\n' \" ${ s } \" } main \" ${ @ } \" Show source code in conv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_hex_to_rgb () { lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 / \\# } \" (( r = 16 #${_:0:2},g=16#${_:2:2},b=16#${_:4:2})) printf '%s\\n' \" $r $g $b \" } function lb_rgb_to_hex () { lb_check_args_num \" ${ @ } \" 3 printf '#%02x%02x%02x\\n' \" $1 \" \" $2 \" \" $3 \" }","title":"conv"},{"location":"libraries/conv/#conv","text":"A library of conversion related functions.","title":"conv"},{"location":"libraries/conv/#lb_hex_to_rgb-hex","text":"Return an rgb number from a hexidecimal number. Parameters: Name Type Description Default hex hex hexidecimal number to be converted to rgb required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /conv\" function main () { hex = \"#FFFFFF\" printf 'hex: %s\\n' \" ${ hex } \" s = $( lb_hex_to_rgb \" ${ hex } \" ) printf 'lb_hex_to_rgb: %s\\n' \" ${ s } \" rgb =( 255 255 255 ) printf 'rgb: %s\\n' \" ${ rgb [@] } \" s = $( lb_rgb_to_hex \" ${ rgb [@] } \" ) printf 'lb_rgb_to_hex: %s\\n' \" ${ s } \" } main \" ${ @ } \" Show source code in conv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_hex_to_rgb () { lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 / \\# } \" (( r = 16 #${_:0:2},g=16#${_:2:2},b=16#${_:4:2})) printf '%s\\n' \" $r $g $b \" } function lb_rgb_to_hex () { lb_check_args_num \" ${ @ } \" 3 printf '#%02x%02x%02x\\n' \" $1 \" \" $2 \" \" $3 \" }","title":"lb_hex_to_rgb hex"},{"location":"libraries/conv/#lb_rgb_to_hex-r-g-b","text":"Return a lower case hexidecimal number prefixed with a pound symbol. Parameters: Name Type Description Default r int red value from 0 to 255 required g int green value from 0 to 255 required b int blue value from 0 to 255 required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /conv\" function main () { hex = \"#FFFFFF\" printf 'hex: %s\\n' \" ${ hex } \" s = $( lb_hex_to_rgb \" ${ hex } \" ) printf 'lb_hex_to_rgb: %s\\n' \" ${ s } \" rgb =( 255 255 255 ) printf 'rgb: %s\\n' \" ${ rgb [@] } \" s = $( lb_rgb_to_hex \" ${ rgb [@] } \" ) printf 'lb_rgb_to_hex: %s\\n' \" ${ s } \" } main \" ${ @ } \" Show source code in conv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_hex_to_rgb () { lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 / \\# } \" (( r = 16 #${_:0:2},g=16#${_:2:2},b=16#${_:4:2})) printf '%s\\n' \" $r $g $b \" } function lb_rgb_to_hex () { lb_check_args_num \" ${ @ } \" 3 printf '#%02x%02x%02x\\n' \" $1 \" \" $2 \" \" $3 \" }","title":"lb_rgb_to_hex r g b"},{"location":"libraries/file/","text":"file A library of file related functions. lb_remove_extension filename Return a file name with the file extension removed. Parameters: Name Type Description Default filename string The filename from which to remove the file extension Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } Note The filename can also be a file path. Note The returned filename excludes all parts of the file extension. lb_get_extension filename Return a file extension from a filename. Parameters: Name Type Description Default filename string The filename from which to get the file extension Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } Note The filename can also be a file path. Note The returned file extension includes all parts of the file extension. lb_get_filename filepath Return a filename from a file path. Parameters: Name Type Description Default filepath string The filepath from which to get the filename Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } lb_get_dir_path filepath Return a directory path from a file path. Parameters: Name Type Description Default filepath string The filepath from which to get the directory path Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } lb_get_abs_path filepath Return an absolute path from a relative file path. Parameters: Name Type Description Default filepath string The relative filepath from which to get the absolute path Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } lb_get_mime_type filepath Return the mime type of a file. Parameters: Name Type Description Default filepath string The filepath from which to get the mime type Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } lb_count dirpath Return the number of specific files or files and directories in a dirpath glob. Parameters: Name Type Description Default dirpath glob The dirpath glob from which to get the number of specific files or files and directories Required Examples: Files and directories count lb_count ~/Downloads/* Directories count lb_count ~/Downloads/*/ Specific files count lb_count ~/Downloads/*.jpg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } Note dirpath must not be in quotes in order for the glob to evaluate properly. Note This function returns the number of files and directories with the /* glob pattern. lb_count_files \"dirpath\" Return the number of files or files in a dirpath glob. Parameters: Name Type Description Default dirpath glob The dirpath glob from which to get the number of files Required Examples: Files count lb_count_files \"~/Downloads/*\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } Note dirpath must be in quotes in order for the glob to be passed properly. lb_get_lines filepath Return the number of lines in a file. Parameters: Name Type Description Default filepath string The filepath from which to get the number of lines Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } lb_extract filepath marker1 marker2 Return the text between two line markers in a file. Parameters: Name Type Description Default filepath string The filepath from which to extract the lines Required marker1 string The line of which to start the extraction Required marker2 string The line of which to end the extraction Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } Note marker1 and marker2 are not included in the return value. Note marker1 and marker2 need to be exact matches of the lines. Note Only the the lines between the first instances that match marker1 and marker2 are returned. lb_get_parent_dir_name path Return the name of the parent folder of either a file or a directory. Parameters: Name Type Description Default path string The filepath or directory path from which to get the name of the parent folder Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" }","title":"file"},{"location":"libraries/file/#file","text":"A library of file related functions.","title":"file"},{"location":"libraries/file/#lb_remove_extension-filename","text":"Return a file name with the file extension removed. Parameters: Name Type Description Default filename string The filename from which to remove the file extension Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } Note The filename can also be a file path. Note The returned filename excludes all parts of the file extension.","title":"lb_remove_extension filename"},{"location":"libraries/file/#lb_get_extension-filename","text":"Return a file extension from a filename. Parameters: Name Type Description Default filename string The filename from which to get the file extension Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } Note The filename can also be a file path. Note The returned file extension includes all parts of the file extension.","title":"lb_get_extension filename"},{"location":"libraries/file/#lb_get_filename-filepath","text":"Return a filename from a file path. Parameters: Name Type Description Default filepath string The filepath from which to get the filename Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" }","title":"lb_get_filename filepath"},{"location":"libraries/file/#lb_get_dir_path-filepath","text":"Return a directory path from a file path. Parameters: Name Type Description Default filepath string The filepath from which to get the directory path Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" }","title":"lb_get_dir_path filepath"},{"location":"libraries/file/#lb_get_abs_path-filepath","text":"Return an absolute path from a relative file path. Parameters: Name Type Description Default filepath string The relative filepath from which to get the absolute path Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" }","title":"lb_get_abs_path filepath"},{"location":"libraries/file/#lb_get_mime_type-filepath","text":"Return the mime type of a file. Parameters: Name Type Description Default filepath string The filepath from which to get the mime type Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" }","title":"lb_get_mime_type filepath"},{"location":"libraries/file/#lb_count-dirpath","text":"Return the number of specific files or files and directories in a dirpath glob. Parameters: Name Type Description Default dirpath glob The dirpath glob from which to get the number of specific files or files and directories Required Examples: Files and directories count lb_count ~/Downloads/* Directories count lb_count ~/Downloads/*/ Specific files count lb_count ~/Downloads/*.jpg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } Note dirpath must not be in quotes in order for the glob to evaluate properly. Note This function returns the number of files and directories with the /* glob pattern.","title":"lb_count dirpath"},{"location":"libraries/file/#lb_count_files-dirpath","text":"Return the number of files or files in a dirpath glob. Parameters: Name Type Description Default dirpath glob The dirpath glob from which to get the number of files Required Examples: Files count lb_count_files \"~/Downloads/*\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } Note dirpath must be in quotes in order for the glob to be passed properly.","title":"lb_count_files \"dirpath\""},{"location":"libraries/file/#lb_get_lines-filepath","text":"Return the number of lines in a file. Parameters: Name Type Description Default filepath string The filepath from which to get the number of lines Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" }","title":"lb_get_lines filepath"},{"location":"libraries/file/#lb_extract-filepath-marker1-marker2","text":"Return the text between two line markers in a file. Parameters: Name Type Description Default filepath string The filepath from which to extract the lines Required marker1 string The line of which to start the extraction Required marker2 string The line of which to end the extraction Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" } Note marker1 and marker2 are not included in the return value. Note marker1 and marker2 need to be exact matches of the lines. Note Only the the lines between the first instances that match marker1 and marker2 are returned.","title":"lb_extract filepath marker1 marker2"},{"location":"libraries/file/#lb_get_parent_dir_name-path","text":"Return the name of the parent folder of either a file or a directory. Parameters: Name Type Description Default path string The filepath or directory path from which to get the name of the parent folder Required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /file\" function do_file () { printf \"file\\n\" file = \"file.tar.gz\" printf \"filename: %s\\n\" \" ${ file } \" s = $( lb_get_extension \" ${ file } \" ) printf \"lb_get_extension: %s\\n\" \" ${ s } \" s = $( lb_remove_extension \" ${ file } \" ) printf \"lb_remove_extension: %s\\n\" \" ${ s } \" } function do_path () { printf \"path\\n\" path = \"../test/test_files/file1\" printf \"rel path: %s\\n\" \" ${ path } \" path = $( lb_get_abs_path \" ${ path } \" ) printf \"lb_get_abs_path: %s\\n\" \" ${ path } \" s = $( lb_get_filename \" ${ path } \" ) printf \"lb_get_filename: %s\\n\" \" ${ s } \" s = $( lb_get_dir_path \" ${ path } \" ) printf \"lb_get_dir_path: %s\\n\" \" ${ s } \" s = $( lb_get_mime_type \" ${ path } \" ) printf \"lb_get_mime_type: %s\\n\" \" ${ s } \" s = $( lb_get_lines \" ${ path } \" ) printf \"lb_get_lines: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*/\" printf \"dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files and dirs path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count files and dirs: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*.tar.gz\" printf \"specific files path: %s\\n\" \" ${ s } \" # shellcheck disable=SC2086 s = $( lb_count ${ s } ) printf \"lb_count specific files: %s\\n\" \" ${ s } \" s = \" $( lb_get_dir_path \" ${ path } \" ) /*\" printf \"files path: %s\\n\" \" ${ s } \" s = $( lb_count_files \" ${ s } \" ) printf \"lb_count files: %s\\n\" \" ${ s } \" s = $( lb_extract \" ${ path } \" \"marker1\" \"marker2\" ) printf \"lb_extract: %s\\n\" \" ${ s } \" printf \"filepath: %s\\n\" \" ${ path } \" s = $( lb_get_parent_dir_name \" ${ path } \" ) printf \"lb_get_parent_dir_name: %s\\n\" \" ${ s } \" } function main () { do_file do_path } main \" ${ @ } \" Show source code in file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Remove file extension function lb_remove_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 %%.* } \" } # Get file extension function lb_get_extension () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 #*. } \" } # Get the file name function lb_get_filename () { lb_check_args_num \" ${ @ } \" 1 basename \" ${ 1 } \" } # Get the directory path function lb_get_dir_path () { lb_check_args_num \" ${ @ } \" 1 dirname \" ${ 1 } \" } # Get the absolute path function lb_get_abs_path (){ lb_check_args_num \" ${ @ } \" 1 s = $( readlink -f \" ${ 1 } \" ) printf '%s\\n' \" ${ s } \" } function lb_get_mime_type (){ lb_check_args_num \" ${ @ } \" 1 file -b --mime-type \" ${ 1 } \" } function lb_get_lines () { lb_check_args_num \" ${ @ } \" 1 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; return 1 ) count = 0 while IFS = read -r _ ; do (( count++ )) done < \" ${ 1 } \" printf '%s\\n' \" $count \" } function lb_count (){ (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" printf '%s\\n' \" $# \" } function lb_count_files (){ lb_check_args_num \" ${ @ } \" 1 count = 0 for i in ${ 1 } ; do [ -f \" ${ i } \" ] && (( count++ )) done printf '%s\\n' \" ${ count } \" } function lb_extract (){ lb_check_args_num \" ${ @ } \" 3 test -f \" ${ 1 } \" || ( lb_fail \"file does not exist\" ; exit 1 ) extract = a =() while IFS = $'\\n' read -r line ; do [[ $extract && $line ! = \" ${ 3 } \" ]] && a +=( \" ${ line } \" ) [[ $line == \" ${ 2 } \" ]] && extract = 1 [[ $line == \" ${ 3 } \" ]] && extract = done < \" ${ 1 } \" printf '%s\\n' \" ${ a [@] } \" } function lb_get_parent_dir_name (){ lb_check_args_num \" ${ @ } \" 1 basename \" $( dirname \" ${ 1 } \" ) \" }","title":"lb_get_parent_dir_name path"},{"location":"libraries/git/","text":"git A library of git related functions. lb_git_available Return 0 if the git binary is available. Parameters: Name Type Description Default None - - - Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /git\" function check_git (){ if lb_git_available ; then printf \"git is available\\n\" else printf \"git is not available\\n\" fi } function check_in_repo (){ if lb_in_git_repo ; then # shellcheck disable=SC2016 printf '$(pwd) is in a repo\\n' else # shellcheck disable=SC2016 printf '$(pwd) is not in a repo\\n' fi } function main () { check_git check_in_repo s = $( lb_repo_root ) printf \"repo_root: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_git_available (){ # shellcheck disable=SC2016 command -v git & >/dev/null || lb_fail 'Git binary not found in ${PATH}' } function lb_in_git_repo (){ lb_git_available git status >/dev/null || lb_fail \" $( pwd ) is not within a git repo.\" } # Get the top level of a git repo function lb_repo_root (){ lb_in_git_repo git rev-parse --show-toplevel } lb_in_git_repo Return 0 if the $(pwd) is in a repo. Parameters: Name Type Description Default None - - - Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /git\" function check_git (){ if lb_git_available ; then printf \"git is available\\n\" else printf \"git is not available\\n\" fi } function check_in_repo (){ if lb_in_git_repo ; then # shellcheck disable=SC2016 printf '$(pwd) is in a repo\\n' else # shellcheck disable=SC2016 printf '$(pwd) is not in a repo\\n' fi } function main () { check_git check_in_repo s = $( lb_repo_root ) printf \"repo_root: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_git_available (){ # shellcheck disable=SC2016 command -v git & >/dev/null || lb_fail 'Git binary not found in ${PATH}' } function lb_in_git_repo (){ lb_git_available git status >/dev/null || lb_fail \" $( pwd ) is not within a git repo.\" } # Get the top level of a git repo function lb_repo_root (){ lb_in_git_repo git rev-parse --show-toplevel } lb_repo_root Return the path of the repo root directory. Parameters: Name Type Description Default None - - - Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /git\" function check_git (){ if lb_git_available ; then printf \"git is available\\n\" else printf \"git is not available\\n\" fi } function check_in_repo (){ if lb_in_git_repo ; then # shellcheck disable=SC2016 printf '$(pwd) is in a repo\\n' else # shellcheck disable=SC2016 printf '$(pwd) is not in a repo\\n' fi } function main () { check_git check_in_repo s = $( lb_repo_root ) printf \"repo_root: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_git_available (){ # shellcheck disable=SC2016 command -v git & >/dev/null || lb_fail 'Git binary not found in ${PATH}' } function lb_in_git_repo (){ lb_git_available git status >/dev/null || lb_fail \" $( pwd ) is not within a git repo.\" } # Get the top level of a git repo function lb_repo_root (){ lb_in_git_repo git rev-parse --show-toplevel }","title":"git"},{"location":"libraries/git/#git","text":"A library of git related functions.","title":"git"},{"location":"libraries/git/#lb_git_available","text":"Return 0 if the git binary is available. Parameters: Name Type Description Default None - - - Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /git\" function check_git (){ if lb_git_available ; then printf \"git is available\\n\" else printf \"git is not available\\n\" fi } function check_in_repo (){ if lb_in_git_repo ; then # shellcheck disable=SC2016 printf '$(pwd) is in a repo\\n' else # shellcheck disable=SC2016 printf '$(pwd) is not in a repo\\n' fi } function main () { check_git check_in_repo s = $( lb_repo_root ) printf \"repo_root: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_git_available (){ # shellcheck disable=SC2016 command -v git & >/dev/null || lb_fail 'Git binary not found in ${PATH}' } function lb_in_git_repo (){ lb_git_available git status >/dev/null || lb_fail \" $( pwd ) is not within a git repo.\" } # Get the top level of a git repo function lb_repo_root (){ lb_in_git_repo git rev-parse --show-toplevel }","title":"lb_git_available"},{"location":"libraries/git/#lb_in_git_repo","text":"Return 0 if the $(pwd) is in a repo. Parameters: Name Type Description Default None - - - Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /git\" function check_git (){ if lb_git_available ; then printf \"git is available\\n\" else printf \"git is not available\\n\" fi } function check_in_repo (){ if lb_in_git_repo ; then # shellcheck disable=SC2016 printf '$(pwd) is in a repo\\n' else # shellcheck disable=SC2016 printf '$(pwd) is not in a repo\\n' fi } function main () { check_git check_in_repo s = $( lb_repo_root ) printf \"repo_root: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_git_available (){ # shellcheck disable=SC2016 command -v git & >/dev/null || lb_fail 'Git binary not found in ${PATH}' } function lb_in_git_repo (){ lb_git_available git status >/dev/null || lb_fail \" $( pwd ) is not within a git repo.\" } # Get the top level of a git repo function lb_repo_root (){ lb_in_git_repo git rev-parse --show-toplevel }","title":"lb_in_git_repo"},{"location":"libraries/git/#lb_repo_root","text":"Return the path of the repo root directory. Parameters: Name Type Description Default None - - - Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /git\" function check_git (){ if lb_git_available ; then printf \"git is available\\n\" else printf \"git is not available\\n\" fi } function check_in_repo (){ if lb_in_git_repo ; then # shellcheck disable=SC2016 printf '$(pwd) is in a repo\\n' else # shellcheck disable=SC2016 printf '$(pwd) is not in a repo\\n' fi } function main () { check_git check_in_repo s = $( lb_repo_root ) printf \"repo_root: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_git_available (){ # shellcheck disable=SC2016 command -v git & >/dev/null || lb_fail 'Git binary not found in ${PATH}' } function lb_in_git_repo (){ lb_git_available git status >/dev/null || lb_fail \" $( pwd ) is not within a git repo.\" } # Get the top level of a git repo function lb_repo_root (){ lb_in_git_repo git rev-parse --show-toplevel }","title":"lb_repo_root"},{"location":"libraries/helpers/","text":"helpers A library of libbash helper functions. Note This library is automatically loaded by the init library. Note This library automatically loads the logging library. lb_die msg Send a fatal message and exit with a status of 1 . Parameters: Name Type Description Default msg string The message to be displayed required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # helpers does not need to be sourced because it is automatically sourced by init. function check_args (){ lb_check_args_num \" ${ @ } \" 2 } function main () { check_args \"one\" \"two\" \"three\" # lb_fail bar # lb_die foo } main \" ${ @ } \" Show source code in helpers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # Check if logging has been loaded # shellcheck source=/dev/null [[ \" ${ LIBBASH_LOG_LEVEL :- } \" ]] || source \" ${ LIBBASH_DIR } /logging\" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_die (){ lb_fatalln \" ${ @ } \" exit 1 } function lb_fail (){ lb_errorln \" ${ @ } \" return 1 } function lb_check_args_num (){ # Number of arguments passed n = $(( \" ${# @ } \" - 1 )) # last argument i = \" ${ *: -1 } \" if (( i ! = n )) ; then if (( i == 1 )) ; then arg = \"arg\" else arg = \"args\" fi lb_fail \" $( printf \"expected %s %s but got %s\" \" ${ i } \" \" ${ arg } \" \" ${ n } \" ) \" fi } lb_fail msg Send an error message and return a status of 1 . Parameters: Name Type Description Default msg string The message to be displayed required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # helpers does not need to be sourced because it is automatically sourced by init. function check_args (){ lb_check_args_num \" ${ @ } \" 2 } function main () { check_args \"one\" \"two\" \"three\" # lb_fail bar # lb_die foo } main \" ${ @ } \" Show source code in helpers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # Check if logging has been loaded # shellcheck source=/dev/null [[ \" ${ LIBBASH_LOG_LEVEL :- } \" ]] || source \" ${ LIBBASH_DIR } /logging\" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_die (){ lb_fatalln \" ${ @ } \" exit 1 } function lb_fail (){ lb_errorln \" ${ @ } \" return 1 } function lb_check_args_num (){ # Number of arguments passed n = $(( \" ${# @ } \" - 1 )) # last argument i = \" ${ *: -1 } \" if (( i ! = n )) ; then if (( i == 1 )) ; then arg = \"arg\" else arg = \"args\" fi lb_fail \" $( printf \"expected %s %s but got %s\" \" ${ i } \" \" ${ arg } \" \" ${ n } \" ) \" fi } lb_check_args_num ${@} num Return 0 if the number of arguments passed matches num . Parameters: Name Type Description Default ${@} string The arguments to check the number of required num int The number of arguments to check for required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # helpers does not need to be sourced because it is automatically sourced by init. function check_args (){ lb_check_args_num \" ${ @ } \" 2 } function main () { check_args \"one\" \"two\" \"three\" # lb_fail bar # lb_die foo } main \" ${ @ } \" Show source code in helpers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # Check if logging has been loaded # shellcheck source=/dev/null [[ \" ${ LIBBASH_LOG_LEVEL :- } \" ]] || source \" ${ LIBBASH_DIR } /logging\" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_die (){ lb_fatalln \" ${ @ } \" exit 1 } function lb_fail (){ lb_errorln \" ${ @ } \" return 1 } function lb_check_args_num (){ # Number of arguments passed n = $(( \" ${# @ } \" - 1 )) # last argument i = \" ${ *: -1 } \" if (( i ! = n )) ; then if (( i == 1 )) ; then arg = \"arg\" else arg = \"args\" fi lb_fail \" $( printf \"expected %s %s but got %s\" \" ${ i } \" \" ${ arg } \" \" ${ n } \" ) \" fi }","title":"helpers"},{"location":"libraries/helpers/#helpers","text":"A library of libbash helper functions. Note This library is automatically loaded by the init library. Note This library automatically loads the logging library.","title":"helpers"},{"location":"libraries/helpers/#lb_die-msg","text":"Send a fatal message and exit with a status of 1 . Parameters: Name Type Description Default msg string The message to be displayed required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # helpers does not need to be sourced because it is automatically sourced by init. function check_args (){ lb_check_args_num \" ${ @ } \" 2 } function main () { check_args \"one\" \"two\" \"three\" # lb_fail bar # lb_die foo } main \" ${ @ } \" Show source code in helpers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # Check if logging has been loaded # shellcheck source=/dev/null [[ \" ${ LIBBASH_LOG_LEVEL :- } \" ]] || source \" ${ LIBBASH_DIR } /logging\" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_die (){ lb_fatalln \" ${ @ } \" exit 1 } function lb_fail (){ lb_errorln \" ${ @ } \" return 1 } function lb_check_args_num (){ # Number of arguments passed n = $(( \" ${# @ } \" - 1 )) # last argument i = \" ${ *: -1 } \" if (( i ! = n )) ; then if (( i == 1 )) ; then arg = \"arg\" else arg = \"args\" fi lb_fail \" $( printf \"expected %s %s but got %s\" \" ${ i } \" \" ${ arg } \" \" ${ n } \" ) \" fi }","title":"lb_die msg"},{"location":"libraries/helpers/#lb_fail-msg","text":"Send an error message and return a status of 1 . Parameters: Name Type Description Default msg string The message to be displayed required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # helpers does not need to be sourced because it is automatically sourced by init. function check_args (){ lb_check_args_num \" ${ @ } \" 2 } function main () { check_args \"one\" \"two\" \"three\" # lb_fail bar # lb_die foo } main \" ${ @ } \" Show source code in helpers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # Check if logging has been loaded # shellcheck source=/dev/null [[ \" ${ LIBBASH_LOG_LEVEL :- } \" ]] || source \" ${ LIBBASH_DIR } /logging\" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_die (){ lb_fatalln \" ${ @ } \" exit 1 } function lb_fail (){ lb_errorln \" ${ @ } \" return 1 } function lb_check_args_num (){ # Number of arguments passed n = $(( \" ${# @ } \" - 1 )) # last argument i = \" ${ *: -1 } \" if (( i ! = n )) ; then if (( i == 1 )) ; then arg = \"arg\" else arg = \"args\" fi lb_fail \" $( printf \"expected %s %s but got %s\" \" ${ i } \" \" ${ arg } \" \" ${ n } \" ) \" fi }","title":"lb_fail msg"},{"location":"libraries/helpers/#lb_check_args_num-num","text":"Return 0 if the number of arguments passed matches num . Parameters: Name Type Description Default ${@} string The arguments to check the number of required num int The number of arguments to check for required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # helpers does not need to be sourced because it is automatically sourced by init. function check_args (){ lb_check_args_num \" ${ @ } \" 2 } function main () { check_args \"one\" \"two\" \"three\" # lb_fail bar # lb_die foo } main \" ${ @ } \" Show source code in helpers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # Check if logging has been loaded # shellcheck source=/dev/null [[ \" ${ LIBBASH_LOG_LEVEL :- } \" ]] || source \" ${ LIBBASH_DIR } /logging\" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_die (){ lb_fatalln \" ${ @ } \" exit 1 } function lb_fail (){ lb_errorln \" ${ @ } \" return 1 } function lb_check_args_num (){ # Number of arguments passed n = $(( \" ${# @ } \" - 1 )) # last argument i = \" ${ *: -1 } \" if (( i ! = n )) ; then if (( i == 1 )) ; then arg = \"arg\" else arg = \"args\" fi lb_fail \" $( printf \"expected %s %s but got %s\" \" ${ i } \" \" ${ arg } \" \" ${ n } \" ) \" fi }","title":"lb_check_args_num ${@} num"},{"location":"libraries/init/","text":"init Initialize libbash . Note This library needs to be loaded before all other libraries so that the LIBBASH_DIR variable can be loaded. Note This library automatically loads the helpers library. Variables: Name Type Description LIBBASH_DIR Enviromental The absolute path for libbash lb_lsf List all libbash functions. Parameters: Name Type Description Default None - - - Examples: 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init function main () { lb_lsf } main \" ${ @ } \" Show source code in init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash if (( BASH_VERSINFO [ 0 ] < 4 )) ; then printf \"Bash Lib requires bash v4 or greater\\n\" printf \"Current Bash Version: %s\\n\" \" ${ BASH_VERSION } \" exit 1 fi # Shell Otions set -euo pipefail # Get the relative path to the repo root # shellcheck disable=SC2034 LIBBASH_DIR = \" $( cd \" $( dirname \" ${ BASH_SOURCE [0] } \" ) \" >/dev/null 2 > & 1 && pwd ) \" # shellcheck source=/dev/null source \" ${ LIBBASH_DIR } /helpers\" # Filter functions and re export only bash-lib functions to subshells eval \" $( declare -F | sed -e 's/-f /-fx /' | grep 'x lb_' ) \" function lb_lsf (){ declare -F | sed -e 's/-f /-fx /' | grep 'x lb_' }","title":"init"},{"location":"libraries/init/#init","text":"Initialize libbash . Note This library needs to be loaded before all other libraries so that the LIBBASH_DIR variable can be loaded. Note This library automatically loads the helpers library. Variables: Name Type Description LIBBASH_DIR Enviromental The absolute path for libbash","title":"init"},{"location":"libraries/init/#lb_lsf","text":"List all libbash functions. Parameters: Name Type Description Default None - - - Examples: 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init function main () { lb_lsf } main \" ${ @ } \" Show source code in init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash if (( BASH_VERSINFO [ 0 ] < 4 )) ; then printf \"Bash Lib requires bash v4 or greater\\n\" printf \"Current Bash Version: %s\\n\" \" ${ BASH_VERSION } \" exit 1 fi # Shell Otions set -euo pipefail # Get the relative path to the repo root # shellcheck disable=SC2034 LIBBASH_DIR = \" $( cd \" $( dirname \" ${ BASH_SOURCE [0] } \" ) \" >/dev/null 2 > & 1 && pwd ) \" # shellcheck source=/dev/null source \" ${ LIBBASH_DIR } /helpers\" # Filter functions and re export only bash-lib functions to subshells eval \" $( declare -F | sed -e 's/-f /-fx /' | grep 'x lb_' ) \" function lb_lsf (){ declare -F | sed -e 's/-f /-fx /' | grep 'x lb_' }","title":"lb_lsf"},{"location":"libraries/logging/","text":"logging A library of logging functions. Note This library is automatically loaded by the helpers library. Variables: Name Type Description Default Options LIBBASH_LOG_LEVEL Environmental The log level during runtime info debug|info|warn|error|fatal Note printf functions currently do not support the passing of multiple parameters. lb_debugf msg Print a debug message without a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" } lb_infof msg Print a info message without a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" } lb_warnf msg Print a warn message without a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" } lb_errorf msg Print a error message without a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" } lb_fatalf msg Print a fatal message without a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" } lb_debugln msg Print a debug message with a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" } lb_infoln msg Print a info message with a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" } lb_warnln msg Print a warn message with a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" } lb_errorln msg Print a error message with a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" } lb_fatalln msg Print a fatal message with a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"logging"},{"location":"libraries/logging/#logging","text":"A library of logging functions. Note This library is automatically loaded by the helpers library. Variables: Name Type Description Default Options LIBBASH_LOG_LEVEL Environmental The log level during runtime info debug|info|warn|error|fatal Note printf functions currently do not support the passing of multiple parameters.","title":"logging"},{"location":"libraries/logging/#lb_debugf-msg","text":"Print a debug message without a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"lb_debugf msg"},{"location":"libraries/logging/#lb_infof-msg","text":"Print a info message without a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"lb_infof msg"},{"location":"libraries/logging/#lb_warnf-msg","text":"Print a warn message without a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"lb_warnf msg"},{"location":"libraries/logging/#lb_errorf-msg","text":"Print a error message without a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"lb_errorf msg"},{"location":"libraries/logging/#lb_fatalf-msg","text":"Print a fatal message without a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"lb_fatalf msg"},{"location":"libraries/logging/#lb_debugln-msg","text":"Print a debug message with a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"lb_debugln msg"},{"location":"libraries/logging/#lb_infoln-msg","text":"Print a info message with a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"lb_infoln msg"},{"location":"libraries/logging/#lb_warnln-msg","text":"Print a warn message with a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"lb_warnln msg"},{"location":"libraries/logging/#lb_errorln-msg","text":"Print a error message with a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"lb_errorln msg"},{"location":"libraries/logging/#lb_fatalln-msg","text":"Print a fatal message with a new line. Parameters: Name Type Description Default msg string The message to print required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init # logging does not need to be sourced because it is automatically sourced by init. # Set write log level # shellcheck disable=SC2034 LIBBASH_LOG_LEVEL = debug function main () { printf \"LIBBASH_LOG_LEVEL: %s\\n\" \" ${ LIBBASH_LOG_LEVEL } \" lb_debugf \"debugf test\\n\" lb_infof \"infof test\\n\" lb_warnf \"warnf test\\n\" lb_errorf \"errorf test\\n\" lb_fatalf \"fatalf test\\n\" lb_debugln \"debugln test\" lb_infoln \"infoln test\" lb_warnln \"warnln test\" lb_errorln \"errorln test\" lb_fatalln \"fatalln test\" } main \" ${ @ } \" Show source code in logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" # shellcheck source=/dev/null # source ./init LIBBASH_LOG_LEVEL = ${ LIBBASH_LOG_LEVEL :- \"info\" } export LIBBASH_LOG_LEVEL # export LIBBASH_LOG_LEVEL=info #------------------------------ Private Functions ------------------------------ function _lb_check_out (){ local out = \" ${ 1 } \" if [[ \" ${ out } \" = ~ stdout | stderr ]] ; then return 0 else printf \"%s is not a valid output argument, it should be stdout|stderr\\n\" \" ${ out } \" return 1 fi } function _lb_check_print (){ local print = \" ${ 1 } \" if [[ \" ${ print } \" = ~ printf | echo ]] ; then return 0 else printf \"%s is not a valid print argument, it should be printf|echo\\n\" \" ${ print } \" return 1 fi } function _lb_check_log_level (){ local level = \" ${ 1 } \" if [[ \" ${ level } \" = ~ debug | info | warn | error | fatal ]] ; then return 0 else printf \"%s is not a valid LIBBASH_LOG_LEVEL, it should be debug|info|warn|error|fatal\\n\" \" ${ level } \" return 1 fi } function _lb_log_msg (){ declare -A LIBBASH_LOG_LEVELS =( \\ [ debug ]= 1 \\ [ info ]= 2 \\ [ warn ]= 3 \\ [ error ]= 4 \\ [ fatal ]= 5 \\ ) declare -A BASH_LIB_LOG_COLOURS =( \\ [ debug ]= \" $( tput setaf 7 ) \" \\ [ info ]= \" $( tput setaf 6 ) \" \\ [ warn ]= \" $( tput setaf 3 ) \" \\ [ error ]= \" $( tput setaf 1 ) \" \\ [ fatal ]= \" $( tput setaf 7 ) \" \\ ) local bg_color # Background color for fatal bg_color = $( tput setab 1 ) local normal normal = $( tput sgr0 ) local runtime_log_level = \" ${ LIBBASH_LOG_LEVEL } \" local write_log_level = \" ${ 1 } \" local print = \" ${ 2 } \" local msg = \" ${ 3 } \" local out = \" ${ 4 :- stdout } \" # Check our input arguments _lb_check_log_level \" ${ runtime_log_level } \" _lb_check_log_level \" ${ write_log_level } \" _lb_check_print \" ${ print } \" _lb_check_out \" ${ out } \" # Get the log level numbers local runtime_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ runtime_log_level } ] } \" local write_level_num = \" ${ LIBBASH_LOG_LEVELS [ ${ write_log_level } ] } \" # Return if the write log level is lower than the runtime log level if (( write_level_num < runtime_level_num )) ; then return fi # Convert to upper case write_log_level_out = \" ${ write_log_level ^^ } \" # Truncate to 4 characters write_log_level_out = \" ${ write_log_level_out :: 4 } \" # Set color write_log_level_out = \" ${ BASH_LIB_LOG_COLOURS [ ${ write_log_level } ] }${ write_log_level_out }${ normal } \" # Set fatal background color if [[ \" ${ write_log_level } \" == \"fatal\" ]] ; then write_log_level_out = \" ${ bg_color }${ write_log_level_out }${ normal } \" fi # Get the date and time format local date_time date_time = $( date + \"%Y-%m-%dT%H:%M:%S%:z\" ) # Create the message message = \" ${ write_log_level_out } [ ${ date_time } ] ${ msg } \" if [[ \" ${ out } \" == \"stderr\" ]] ; then if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" 1 > & 2 else echo \" ${ message } \" 1 > & 2 fi else if [[ \" ${ print } \" == \"printf\" ]] ; then # shellcheck disable=SC2059 printf \" ${ message } \" else echo \" ${ message } \" fi fi } #------------------------------ Public Functions ------------------------------ function lb_debugf (){ _lb_log_msg debug printf \" ${ * } \" } function lb_infof (){ _lb_log_msg info printf \" ${ * } \" } function lb_warnf (){ _lb_log_msg warn printf \" ${ * } \" } function lb_errorf (){ _lb_log_msg error printf \" ${ * } \" } function lb_fatalf (){ _lb_log_msg fatal printf \" ${ * } \" } function lb_debugln (){ _lb_log_msg debug echo \" ${ * } \" } function lb_infoln (){ _lb_log_msg info echo \" ${ * } \" } function lb_warnln (){ _lb_log_msg warn echo \" ${ * } \" } function lb_errorln (){ _lb_log_msg error echo \" ${ * } \" } function lb_fatalln (){ _lb_log_msg fatal echo \" ${ * } \" }","title":"lb_fatalln msg"},{"location":"libraries/other/","text":"other A library of other related functions. lb_gen_uuid Return a generated uuid v4. Parameters: Name Type Description Default None - - - Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /other\" function main () { printf 'lb_read_sleep\\n' lb_read_sleep 1 s = $( lb_gen_uuid ) printf 'lb_uuid: %s\\n' \" ${ s } \" } main \" ${ @ } \" Show source code in other 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_gen_uuid () { C = \"89ab\" for (( N = 0 ; N< 16 ; ++N )) ; do B = \" $(( RANDOM%256 )) \" case \" $N \" in 6 ) printf '4%x' \" $(( B%16 )) \" ;; 8 ) printf '%c%x' \" ${ C : $RANDOM % ${# C } : 1 } \" \" $(( B%16 )) \" ;; 3 | 5 | 7 | 9 ) printf '%02x-' \" $B \" ;; * ) printf '%02x' \" $B \" ;; esac done printf '\\n' } function lb_read_sleep () { lb_check_args_num \" ${ @ } \" 1 read -rt \" ${ 1 } \" <> < ( : ) || : } function lb_bkr () { (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" ( nohup \" $@ \" & >/dev/null & ) } lb_read_sleep time Sleep for a certain period of item using the read command. Parameters: Name Type Description Default time float The time to sleep in seconds required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /other\" function main () { printf 'lb_read_sleep\\n' lb_read_sleep 1 s = $( lb_gen_uuid ) printf 'lb_uuid: %s\\n' \" ${ s } \" } main \" ${ @ } \" Show source code in other 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_gen_uuid () { C = \"89ab\" for (( N = 0 ; N< 16 ; ++N )) ; do B = \" $(( RANDOM%256 )) \" case \" $N \" in 6 ) printf '4%x' \" $(( B%16 )) \" ;; 8 ) printf '%c%x' \" ${ C : $RANDOM % ${# C } : 1 } \" \" $(( B%16 )) \" ;; 3 | 5 | 7 | 9 ) printf '%02x-' \" $B \" ;; * ) printf '%02x' \" $B \" ;; esac done printf '\\n' } function lb_read_sleep () { lb_check_args_num \" ${ @ } \" 1 read -rt \" ${ 1 } \" <> < ( : ) || : } function lb_bkr () { (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" ( nohup \" $@ \" & >/dev/null & ) } lb_bkr Run a script in the background. Parameters: Name Type Description Default None - - - Examples: bkr ./myscript.sh Show source code in other 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_gen_uuid () { C = \"89ab\" for (( N = 0 ; N< 16 ; ++N )) ; do B = \" $(( RANDOM%256 )) \" case \" $N \" in 6 ) printf '4%x' \" $(( B%16 )) \" ;; 8 ) printf '%c%x' \" ${ C : $RANDOM % ${# C } : 1 } \" \" $(( B%16 )) \" ;; 3 | 5 | 7 | 9 ) printf '%02x-' \" $B \" ;; * ) printf '%02x' \" $B \" ;; esac done printf '\\n' } function lb_read_sleep () { lb_check_args_num \" ${ @ } \" 1 read -rt \" ${ 1 } \" <> < ( : ) || : } function lb_bkr () { (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" ( nohup \" $@ \" & >/dev/null & ) }","title":"other"},{"location":"libraries/other/#other","text":"A library of other related functions.","title":"other"},{"location":"libraries/other/#lb_gen_uuid","text":"Return a generated uuid v4. Parameters: Name Type Description Default None - - - Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /other\" function main () { printf 'lb_read_sleep\\n' lb_read_sleep 1 s = $( lb_gen_uuid ) printf 'lb_uuid: %s\\n' \" ${ s } \" } main \" ${ @ } \" Show source code in other 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_gen_uuid () { C = \"89ab\" for (( N = 0 ; N< 16 ; ++N )) ; do B = \" $(( RANDOM%256 )) \" case \" $N \" in 6 ) printf '4%x' \" $(( B%16 )) \" ;; 8 ) printf '%c%x' \" ${ C : $RANDOM % ${# C } : 1 } \" \" $(( B%16 )) \" ;; 3 | 5 | 7 | 9 ) printf '%02x-' \" $B \" ;; * ) printf '%02x' \" $B \" ;; esac done printf '\\n' } function lb_read_sleep () { lb_check_args_num \" ${ @ } \" 1 read -rt \" ${ 1 } \" <> < ( : ) || : } function lb_bkr () { (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" ( nohup \" $@ \" & >/dev/null & ) }","title":"lb_gen_uuid"},{"location":"libraries/other/#lb_read_sleep-time","text":"Sleep for a certain period of item using the read command. Parameters: Name Type Description Default time float The time to sleep in seconds required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /other\" function main () { printf 'lb_read_sleep\\n' lb_read_sleep 1 s = $( lb_gen_uuid ) printf 'lb_uuid: %s\\n' \" ${ s } \" } main \" ${ @ } \" Show source code in other 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_gen_uuid () { C = \"89ab\" for (( N = 0 ; N< 16 ; ++N )) ; do B = \" $(( RANDOM%256 )) \" case \" $N \" in 6 ) printf '4%x' \" $(( B%16 )) \" ;; 8 ) printf '%c%x' \" ${ C : $RANDOM % ${# C } : 1 } \" \" $(( B%16 )) \" ;; 3 | 5 | 7 | 9 ) printf '%02x-' \" $B \" ;; * ) printf '%02x' \" $B \" ;; esac done printf '\\n' } function lb_read_sleep () { lb_check_args_num \" ${ @ } \" 1 read -rt \" ${ 1 } \" <> < ( : ) || : } function lb_bkr () { (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" ( nohup \" $@ \" & >/dev/null & ) }","title":"lb_read_sleep time"},{"location":"libraries/other/#lb_bkr","text":"Run a script in the background. Parameters: Name Type Description Default None - - - Examples: bkr ./myscript.sh Show source code in other 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_gen_uuid () { C = \"89ab\" for (( N = 0 ; N< 16 ; ++N )) ; do B = \" $(( RANDOM%256 )) \" case \" $N \" in 6 ) printf '4%x' \" $(( B%16 )) \" ;; 8 ) printf '%c%x' \" ${ C : $RANDOM % ${# C } : 1 } \" \" $(( B%16 )) \" ;; 3 | 5 | 7 | 9 ) printf '%02x-' \" $B \" ;; * ) printf '%02x' \" $B \" ;; esac done printf '\\n' } function lb_read_sleep () { lb_check_args_num \" ${ @ } \" 1 read -rt \" ${ 1 } \" <> < ( : ) || : } function lb_bkr () { (( ${# @ } == 0 )) && lb_fail \"expected at least 1 arg but got 0\" ( nohup \" $@ \" & >/dev/null & ) }","title":"lb_bkr"},{"location":"libraries/script/","text":"script A library of script related functions. lb_show_usage ${0} Show a script usage message. Parameters: Name Type Description Default ${0} string The name of the script required Variables: Name Type Description Default LIBBASH_USAGE_MSG Environmental The suffix of the usage message [OPTIONS] ARGS Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /script\" # shellcheck disable=SC2034 LIBBASH_USAGE_MSG = \"my custom usage message\" function main () { printf \"LIBBASH_USAGE_MSG: %s\\n\" \" ${ LIBBASH_USAGE_MSG } \" # lb_show_usage \"${0}\" # lb_show_version \"${0}\" \"0.1.0\" lb_usage_error \" ${ 0 } \" } main \" ${ @ } \" Show source code in script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_USAGE_MSG = ${ LIBBASH_USAGE_MSG :- \"[OPTIONS] ARGS\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Show a usage message function lb_show_usage (){ printf \"Usage: %s %s\\n\" \" ${ 1 } \" \" ${ LIBBASH_USAGE_MSG } \" } function lb_show_version (){ printf \"%s version %s\\n\" \" ${ 1 } \" \" ${ 2 } \" exit 0 } function lb_usage_error () { lb_show_usage \" ${ 1 } \" printf \"\\nTry %s -h for more options.\\n\" \" ${ 1 } \" > & 2 exit 1 } Note The message has a prefix of Usage: lb_show_version version Show the script version and exit with a status of 0 . Parameters: Name Type Description Default version string The version of the script required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /script\" # shellcheck disable=SC2034 LIBBASH_USAGE_MSG = \"my custom usage message\" function main () { printf \"LIBBASH_USAGE_MSG: %s\\n\" \" ${ LIBBASH_USAGE_MSG } \" # lb_show_usage \"${0}\" # lb_show_version \"${0}\" \"0.1.0\" lb_usage_error \" ${ 0 } \" } main \" ${ @ } \" Show source code in script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_USAGE_MSG = ${ LIBBASH_USAGE_MSG :- \"[OPTIONS] ARGS\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Show a usage message function lb_show_usage (){ printf \"Usage: %s %s\\n\" \" ${ 1 } \" \" ${ LIBBASH_USAGE_MSG } \" } function lb_show_version (){ printf \"%s version %s\\n\" \" ${ 1 } \" \" ${ 2 } \" exit 0 } function lb_usage_error () { lb_show_usage \" ${ 1 } \" printf \"\\nTry %s -h for more options.\\n\" \" ${ 1 } \" > & 2 exit 1 } lb_usage_error ${0} Show the script usage and help options and exit with a status of 1 . Parameters: Name Type Description Default ${0} string The name of the script required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /script\" # shellcheck disable=SC2034 LIBBASH_USAGE_MSG = \"my custom usage message\" function main () { printf \"LIBBASH_USAGE_MSG: %s\\n\" \" ${ LIBBASH_USAGE_MSG } \" # lb_show_usage \"${0}\" # lb_show_version \"${0}\" \"0.1.0\" lb_usage_error \" ${ 0 } \" } main \" ${ @ } \" Show source code in script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_USAGE_MSG = ${ LIBBASH_USAGE_MSG :- \"[OPTIONS] ARGS\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Show a usage message function lb_show_usage (){ printf \"Usage: %s %s\\n\" \" ${ 1 } \" \" ${ LIBBASH_USAGE_MSG } \" } function lb_show_version (){ printf \"%s version %s\\n\" \" ${ 1 } \" \" ${ 2 } \" exit 0 } function lb_usage_error () { lb_show_usage \" ${ 1 } \" printf \"\\nTry %s -h for more options.\\n\" \" ${ 1 } \" > & 2 exit 1 }","title":"script"},{"location":"libraries/script/#script","text":"A library of script related functions.","title":"script"},{"location":"libraries/script/#lb_show_usage-0","text":"Show a script usage message. Parameters: Name Type Description Default ${0} string The name of the script required Variables: Name Type Description Default LIBBASH_USAGE_MSG Environmental The suffix of the usage message [OPTIONS] ARGS Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /script\" # shellcheck disable=SC2034 LIBBASH_USAGE_MSG = \"my custom usage message\" function main () { printf \"LIBBASH_USAGE_MSG: %s\\n\" \" ${ LIBBASH_USAGE_MSG } \" # lb_show_usage \"${0}\" # lb_show_version \"${0}\" \"0.1.0\" lb_usage_error \" ${ 0 } \" } main \" ${ @ } \" Show source code in script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_USAGE_MSG = ${ LIBBASH_USAGE_MSG :- \"[OPTIONS] ARGS\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Show a usage message function lb_show_usage (){ printf \"Usage: %s %s\\n\" \" ${ 1 } \" \" ${ LIBBASH_USAGE_MSG } \" } function lb_show_version (){ printf \"%s version %s\\n\" \" ${ 1 } \" \" ${ 2 } \" exit 0 } function lb_usage_error () { lb_show_usage \" ${ 1 } \" printf \"\\nTry %s -h for more options.\\n\" \" ${ 1 } \" > & 2 exit 1 } Note The message has a prefix of Usage:","title":"lb_show_usage ${0}"},{"location":"libraries/script/#lb_show_version-version","text":"Show the script version and exit with a status of 0 . Parameters: Name Type Description Default version string The version of the script required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /script\" # shellcheck disable=SC2034 LIBBASH_USAGE_MSG = \"my custom usage message\" function main () { printf \"LIBBASH_USAGE_MSG: %s\\n\" \" ${ LIBBASH_USAGE_MSG } \" # lb_show_usage \"${0}\" # lb_show_version \"${0}\" \"0.1.0\" lb_usage_error \" ${ 0 } \" } main \" ${ @ } \" Show source code in script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_USAGE_MSG = ${ LIBBASH_USAGE_MSG :- \"[OPTIONS] ARGS\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Show a usage message function lb_show_usage (){ printf \"Usage: %s %s\\n\" \" ${ 1 } \" \" ${ LIBBASH_USAGE_MSG } \" } function lb_show_version (){ printf \"%s version %s\\n\" \" ${ 1 } \" \" ${ 2 } \" exit 0 } function lb_usage_error () { lb_show_usage \" ${ 1 } \" printf \"\\nTry %s -h for more options.\\n\" \" ${ 1 } \" > & 2 exit 1 }","title":"lb_show_version version"},{"location":"libraries/script/#lb_usage_error-0","text":"Show the script usage and help options and exit with a status of 1 . Parameters: Name Type Description Default ${0} string The name of the script required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /script\" # shellcheck disable=SC2034 LIBBASH_USAGE_MSG = \"my custom usage message\" function main () { printf \"LIBBASH_USAGE_MSG: %s\\n\" \" ${ LIBBASH_USAGE_MSG } \" # lb_show_usage \"${0}\" # lb_show_version \"${0}\" \"0.1.0\" lb_usage_error \" ${ 0 } \" } main \" ${ @ } \" Show source code in script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_USAGE_MSG = ${ LIBBASH_USAGE_MSG :- \"[OPTIONS] ARGS\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Show a usage message function lb_show_usage (){ printf \"Usage: %s %s\\n\" \" ${ 1 } \" \" ${ LIBBASH_USAGE_MSG } \" } function lb_show_version (){ printf \"%s version %s\\n\" \" ${ 1 } \" \" ${ 2 } \" exit 0 } function lb_usage_error () { lb_show_usage \" ${ 1 } \" printf \"\\nTry %s -h for more options.\\n\" \" ${ 1 } \" > & 2 exit 1 }","title":"lb_usage_error ${0}"},{"location":"libraries/str/","text":"str A library of string related functions. lb_to_lower_all string Return a string with all characters converted to lower case. Parameters: Name Type Description Default string string The string to convert to lower case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_to_upper_all string Return a string with all characters converted to upper case. Parameters: Name Type Description Default string string The string to convert to upper case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_rm_last_char string Return a string with the last character removed. Parameters: Name Type Description Default string string The string from which to remove the last character required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_get_last_char string Return the last character of a string. Parameters: Name Type Description Default string string The string from which to get the last character required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_length string Get the length of a string. Parameters: Name Type Description Default string string The string from which to get the length required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_replace string old new Return a copy of the string with all occurrences of substring old replaced by new . Parameters: Name Type Description Default string string The string that is to be worked on required old string The substring to be replaced required new string The substring to be replaced by required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_reverse_case_all string Return a copy of the string with reverse case of all characters. Parameters: Name Type Description Default string string The string that is to be converted to reverse case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_split string [ delimiter ] Return an array of the string components split at the delimiter . Parameters: Name Type Description Default string string The string that is to be split required delimiter string The delimiter that is to be used to split string optional Variables: Name Type Description Default LIBBASH_DELIMITER string The default delimiter that is to be used to split string , Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_trim string Return a copy of the string with leading and trailing white-space removed. Parameters: Name Type Description Default string string The string that is to be trimmed required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } Note This function does not trim the white-space in between words. See lb_trim_all . lb_trim_all string Return a copy of the string with leading and trailing white-space removed and truncated spaces in between words. Parameters: Name Type Description Default string string The string that is to be trimmed and truncated required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_trim_quotes string Return a copy of the string with single and double quotes removed. Parameters: Name Type Description Default string string The string that is to be trimmed of quotes required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_strip_all string pattern Return a copy of the string with all copies of a pattern stripped. Parameters: Name Type Description Default string string The string that is to be trimmed of pattern required pattern string The pattern that is to be stripped from string required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_strip string pattern Return a copy of the string with the first copy of a pattern stripped. Parameters: Name Type Description Default string string The string that is to be trimmed of pattern required pattern string The pattern that is to be stripped from string required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_lstrip string pattern Return a copy of the string with a pattern stripped from the start of string. Parameters: Name Type Description Default string string The string that is to be trimmed of pattern required pattern string The pattern that is to be stripped from string required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_rstrip string pattern Return a copy of the string with a pattern stripped from the end of string. Parameters: Name Type Description Default string string The string that is to be trimmed of pattern required pattern string The pattern that is to be stripped from string required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_reverse_case string Return a copy of the string with reverse case of the first character. Parameters: Name Type Description Default string string The string with which the first character is to be converted to reverse case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_to_lower string Return a string with the first character converted to lower case. Parameters: Name Type Description Default string string The string to convert the first character to lower case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_to_upper string Return a string with the first character converted to upper case. Parameters: Name Type Description Default string string The string to convert the first character to upper case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } lb_regex string pattern Return a matching regular expression from a pattern and string . Parameters: Name Type Description Default string string The string perform the regex on required pattern string The pattern used to by regex required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } Note bash will use whatever regex engine is installed on the user's system. Note This function only prints the first matching group.","title":"str"},{"location":"libraries/str/#str","text":"A library of string related functions.","title":"str"},{"location":"libraries/str/#lb_to_lower_all-string","text":"Return a string with all characters converted to lower case. Parameters: Name Type Description Default string string The string to convert to lower case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_to_lower_all string"},{"location":"libraries/str/#lb_to_upper_all-string","text":"Return a string with all characters converted to upper case. Parameters: Name Type Description Default string string The string to convert to upper case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_to_upper_all string"},{"location":"libraries/str/#lb_rm_last_char-string","text":"Return a string with the last character removed. Parameters: Name Type Description Default string string The string from which to remove the last character required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_rm_last_char string"},{"location":"libraries/str/#lb_get_last_char-string","text":"Return the last character of a string. Parameters: Name Type Description Default string string The string from which to get the last character required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_get_last_char string"},{"location":"libraries/str/#lb_length-string","text":"Get the length of a string. Parameters: Name Type Description Default string string The string from which to get the length required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_length string"},{"location":"libraries/str/#lb_replace-string-old-new","text":"Return a copy of the string with all occurrences of substring old replaced by new . Parameters: Name Type Description Default string string The string that is to be worked on required old string The substring to be replaced required new string The substring to be replaced by required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_replace string old new"},{"location":"libraries/str/#lb_reverse_case_all-string","text":"Return a copy of the string with reverse case of all characters. Parameters: Name Type Description Default string string The string that is to be converted to reverse case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_reverse_case_all string"},{"location":"libraries/str/#lb_split-string-delimiter","text":"Return an array of the string components split at the delimiter . Parameters: Name Type Description Default string string The string that is to be split required delimiter string The delimiter that is to be used to split string optional Variables: Name Type Description Default LIBBASH_DELIMITER string The default delimiter that is to be used to split string , Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_split string [delimiter]"},{"location":"libraries/str/#lb_trim-string","text":"Return a copy of the string with leading and trailing white-space removed. Parameters: Name Type Description Default string string The string that is to be trimmed required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } Note This function does not trim the white-space in between words. See lb_trim_all .","title":"lb_trim string"},{"location":"libraries/str/#lb_trim_all-string","text":"Return a copy of the string with leading and trailing white-space removed and truncated spaces in between words. Parameters: Name Type Description Default string string The string that is to be trimmed and truncated required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_trim_all string"},{"location":"libraries/str/#lb_trim_quotes-string","text":"Return a copy of the string with single and double quotes removed. Parameters: Name Type Description Default string string The string that is to be trimmed of quotes required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_trim_quotes string"},{"location":"libraries/str/#lb_strip_all-string-pattern","text":"Return a copy of the string with all copies of a pattern stripped. Parameters: Name Type Description Default string string The string that is to be trimmed of pattern required pattern string The pattern that is to be stripped from string required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_strip_all string pattern"},{"location":"libraries/str/#lb_strip-string-pattern","text":"Return a copy of the string with the first copy of a pattern stripped. Parameters: Name Type Description Default string string The string that is to be trimmed of pattern required pattern string The pattern that is to be stripped from string required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_strip string pattern"},{"location":"libraries/str/#lb_lstrip-string-pattern","text":"Return a copy of the string with a pattern stripped from the start of string. Parameters: Name Type Description Default string string The string that is to be trimmed of pattern required pattern string The pattern that is to be stripped from string required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_lstrip string pattern"},{"location":"libraries/str/#lb_rstrip-string-pattern","text":"Return a copy of the string with a pattern stripped from the end of string. Parameters: Name Type Description Default string string The string that is to be trimmed of pattern required pattern string The pattern that is to be stripped from string required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_rstrip string pattern"},{"location":"libraries/str/#lb_reverse_case-string","text":"Return a copy of the string with reverse case of the first character. Parameters: Name Type Description Default string string The string with which the first character is to be converted to reverse case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_reverse_case string"},{"location":"libraries/str/#lb_to_lower-string","text":"Return a string with the first character converted to lower case. Parameters: Name Type Description Default string string The string to convert the first character to lower case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_to_lower string"},{"location":"libraries/str/#lb_to_upper-string","text":"Return a string with the first character converted to upper case. Parameters: Name Type Description Default string string The string to convert the first character to upper case required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" }","title":"lb_to_upper string"},{"location":"libraries/str/#lb_regex-string-pattern","text":"Return a matching regular expression from a pattern and string . Parameters: Name Type Description Default string string The string perform the regex on required pattern string The pattern used to by regex required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /str\" function main () { string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper_all \" ${ string } \" ) printf \"lb_to_upper_all: %s\\n\" \" ${ s } \" s = $( lb_to_lower_all \" ${ string } \" ) printf \"lb_to_lower_all: %s\\n\" \" ${ s } \" s = $( lb_rm_last_char \" ${ string } \" ) printf \"lb_rm_last_char: %s\\n\" \" ${ s } \" s = $( lb_get_last_char \" ${ string } \" ) printf \"lb_get_last_char: %s\\n\" \" ${ s } \" s = $( lb_length \" ${ string } \" ) printf \"lb_length: %s\\n\" \" ${ s } \" s = $( lb_replace \" ${ string } \" \"123\" \"456\" ) printf \"lb_replace: %s\\n\" \" ${ s } \" s = $( lb_reverse_case_all \" ${ string } \" ) printf \"lb_reverse_case_all: %s\\n\" \" ${ s } \" printf \"LIBBASH_DELIMITER: %s\\n\" \" ${ LIBBASH_DELIMITER } \" string = \"apples,oranges,pears,grapes\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_split \" ${ string } \" ) printf \"lb_split: %s\\n\" \" ${ s } \" string = \" Hello, World \" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim \" ${ string } \" ) printf \"lb_trim: %s\\n\" \" ${ s } \" s = $( lb_trim_all \" ${ string } \" ) printf \"lb_trim_all: %s\\n\" \" ${ s } \" string = \"'Hello', \\\"World\\\"\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_trim_quotes \" ${ string } \" ) printf \"lb_trim_quotes: %s\\n\" \" ${ s } \" string = \"The Quick Brown Fox\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip_all \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip_all: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"[aeiou]\" s = $( lb_strip \" ${ string } \" \"[aeiou]\" ) printf \"lb_strip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \"The \" s = $( lb_lstrip \" ${ string } \" \"The \" ) printf \"lb_lstrip: %s\\n\" \" ${ s } \" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" \" Fox\" s = $( lb_rstrip \" ${ string } \" \" Fox\" ) printf \"lb_rstrip: %s\\n\" \" ${ s } \" string = \"abcABC123ABCabc\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_upper \" ${ string } \" ) printf \"lb_to_upper: %s\\n\" \" ${ s } \" string = \"ABCabc123abcABC\" printf \"string: %s\\n\" \" ${ string } \" s = $( lb_to_lower \" ${ string } \" ) printf \"lb_to_lower: %s\\n\" \" ${ s } \" s = $( lb_reverse_case \" ${ string } \" ) printf \"lb_reverse_case: %s\\n\" \" ${ s } \" string = \" hello\" printf \"string: %s\\npattern: %s\\n\" \" ${ string } \" '^\\s*(.*)' s = $( lb_regex \" ${ string } \" '^\\s*(.*)' ) printf \"lb_regex: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in str 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ LIBBASH_DELIMITER = ${ LIBBASH_DELIMITER :- \",\" } #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ # Convert string to lower case function lb_to_lower_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ,, } \" } # Convert string to upper case function lb_to_upper_all (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^^ } \" } # Remove the last character function lb_rm_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : :- 1 } \" } # Get the last character function lb_get_last_char (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 : -1 } \" } # Get the length of a variable function lb_length (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${# 1 } \" } # Replace a string function lb_replace (){ lb_check_args_num \" ${ @ } \" 3 printf '%s\\n' \" ${ 1 / $2 / $3 } \" } function lb_reverse_case_all () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~~ } \" } function lb_split (){ if [[ \" ${# @ } \" ! = 1 ]] && [[ \" ${# @ } \" ! = 2 ]] ; then lb_fail \" $( printf \"expected 1 or 2 args but got %s\\n\" \" ${# @ } \" ) \" fi # Default delimiter delim = ${ 2 :- ${ LIBBASH_DELIMITER }} IFS = $'\\n' read -d \"\" -ra arr <<< \" ${ 1 // $delim / $'\\n' } \" printf '%s\\n' \" ${ arr [@] } \" } function lb_trim (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 # \" ${ 1 %%[![: space :]]* } \" } \" : \" ${ _ % \" ${ _ ##*[![: space :]] } \" } \" printf '%s\\n' \" $_ \" } function lb_trim_all (){ lb_check_args_num \" ${ @ } \" 1 if [[ \" $- \" = *f* ]] ; then is_set = \"false\" else is_set = \"true\" fi set -f # shellcheck disable=SC2048,SC2086 set -- $* printf '%s\\n' \" $* \" if [[ \" ${ is_set } \" == \"false\" ]] ; then set +f fi } function lb_trim_quotes (){ lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 // \\' } \" printf '%s\\n' \" ${ _ // \\\" } \" } function lb_strip_all (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 // $2 } \" } function lb_strip (){ lb_check_args_num \" ${ @ } \" 2 printf '%s\\n' \" ${ 1 / $2 } \" } function lb_lstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 ## $2 } \" } function lb_rstrip (){ lb_check_args_num \" ${ @ } \" 2 # shellcheck disable=SC2295 printf '%s\\n' \" ${ 1 %% $2 } \" } function lb_to_upper (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ^ } \" } function lb_to_lower (){ lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 , } \" } function lb_reverse_case () { lb_check_args_num \" ${ @ } \" 1 printf '%s\\n' \" ${ 1 ~ } \" } function lb_regex (){ lb_check_args_num \" ${ @ } \" 2 [[ $1 = ~ $2 ]] && printf '%s\\n' \" ${ BASH_REMATCH [1] } \" } Note bash will use whatever regex engine is installed on the user's system. Note This function only prints the first matching group.","title":"lb_regex string pattern"},{"location":"libraries/url/","text":"url A library of URL related functions. lb_get_domain url Return the domain from a url. Parameters: Name Type Description Default url string The url from which to get the domain required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /url\" function main () { url = \"http://user:pw@example.com:80/some/path/url?data&and#hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_get_domain \" ${ url } \" ) printf \"lb_get_domain: %s\\n\" \" ${ s } \" s = $( lb_url_encode \" ${ url } \" ) printf \"lb_url_encode: %s\\n\" \" ${ s } \" url = \"http%3A%2F%2Fuser%3Apw%40example.com%3A80%2Fsome%2Fpath%2Furl%3Fdata%26and%23hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_url_decode \" ${ url } \" ) printf \"lb_url_decode: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in url 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_get_domain () { lb_check_args_num \" ${ @ } \" 1 # https://unix.stackexchange.com/a/428990/93726 echo \" ${ 1 } \" | sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\" | sed \"s/^www\\.//\" | cut -f 1 -d '.' } function lb_url_encode (){ lb_check_args_num \" ${ @ } \" 1 local LC_ALL = C for (( i = 0 ; i < ${# 1 } ; i++ )) ; do : \" ${ 1 : i : 1 } \" case \" $_ \" in [ a-zA-Z0-9.~_- ]) printf '%s' \" $_ \" ;; * ) printf '%%%02X' \"' $_ \" ;; esac done printf '\\n' } function lb_url_decode () { lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 //+/ } \" printf '%b\\n' \" ${ _ //%/ \\\\ x } \" } lb_url_encode url Return a percent-encoded url. Parameters: Name Type Description Default url string The url to encode required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /url\" function main () { url = \"http://user:pw@example.com:80/some/path/url?data&and#hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_get_domain \" ${ url } \" ) printf \"lb_get_domain: %s\\n\" \" ${ s } \" s = $( lb_url_encode \" ${ url } \" ) printf \"lb_url_encode: %s\\n\" \" ${ s } \" url = \"http%3A%2F%2Fuser%3Apw%40example.com%3A80%2Fsome%2Fpath%2Furl%3Fdata%26and%23hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_url_decode \" ${ url } \" ) printf \"lb_url_decode: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in url 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_get_domain () { lb_check_args_num \" ${ @ } \" 1 # https://unix.stackexchange.com/a/428990/93726 echo \" ${ 1 } \" | sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\" | sed \"s/^www\\.//\" | cut -f 1 -d '.' } function lb_url_encode (){ lb_check_args_num \" ${ @ } \" 1 local LC_ALL = C for (( i = 0 ; i < ${# 1 } ; i++ )) ; do : \" ${ 1 : i : 1 } \" case \" $_ \" in [ a-zA-Z0-9.~_- ]) printf '%s' \" $_ \" ;; * ) printf '%%%02X' \"' $_ \" ;; esac done printf '\\n' } function lb_url_decode () { lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 //+/ } \" printf '%b\\n' \" ${ _ //%/ \\\\ x } \" } lb_url_decode url Return a percent-decoded url. Parameters: Name Type Description Default url string The url to decode required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /url\" function main () { url = \"http://user:pw@example.com:80/some/path/url?data&and#hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_get_domain \" ${ url } \" ) printf \"lb_get_domain: %s\\n\" \" ${ s } \" s = $( lb_url_encode \" ${ url } \" ) printf \"lb_url_encode: %s\\n\" \" ${ s } \" url = \"http%3A%2F%2Fuser%3Apw%40example.com%3A80%2Fsome%2Fpath%2Furl%3Fdata%26and%23hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_url_decode \" ${ url } \" ) printf \"lb_url_decode: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in url 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_get_domain () { lb_check_args_num \" ${ @ } \" 1 # https://unix.stackexchange.com/a/428990/93726 echo \" ${ 1 } \" | sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\" | sed \"s/^www\\.//\" | cut -f 1 -d '.' } function lb_url_encode (){ lb_check_args_num \" ${ @ } \" 1 local LC_ALL = C for (( i = 0 ; i < ${# 1 } ; i++ )) ; do : \" ${ 1 : i : 1 } \" case \" $_ \" in [ a-zA-Z0-9.~_- ]) printf '%s' \" $_ \" ;; * ) printf '%%%02X' \"' $_ \" ;; esac done printf '\\n' } function lb_url_decode () { lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 //+/ } \" printf '%b\\n' \" ${ _ //%/ \\\\ x } \" }","title":"url"},{"location":"libraries/url/#url","text":"A library of URL related functions.","title":"url"},{"location":"libraries/url/#lb_get_domain-url","text":"Return the domain from a url. Parameters: Name Type Description Default url string The url from which to get the domain required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /url\" function main () { url = \"http://user:pw@example.com:80/some/path/url?data&and#hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_get_domain \" ${ url } \" ) printf \"lb_get_domain: %s\\n\" \" ${ s } \" s = $( lb_url_encode \" ${ url } \" ) printf \"lb_url_encode: %s\\n\" \" ${ s } \" url = \"http%3A%2F%2Fuser%3Apw%40example.com%3A80%2Fsome%2Fpath%2Furl%3Fdata%26and%23hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_url_decode \" ${ url } \" ) printf \"lb_url_decode: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in url 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_get_domain () { lb_check_args_num \" ${ @ } \" 1 # https://unix.stackexchange.com/a/428990/93726 echo \" ${ 1 } \" | sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\" | sed \"s/^www\\.//\" | cut -f 1 -d '.' } function lb_url_encode (){ lb_check_args_num \" ${ @ } \" 1 local LC_ALL = C for (( i = 0 ; i < ${# 1 } ; i++ )) ; do : \" ${ 1 : i : 1 } \" case \" $_ \" in [ a-zA-Z0-9.~_- ]) printf '%s' \" $_ \" ;; * ) printf '%%%02X' \"' $_ \" ;; esac done printf '\\n' } function lb_url_decode () { lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 //+/ } \" printf '%b\\n' \" ${ _ //%/ \\\\ x } \" }","title":"lb_get_domain url"},{"location":"libraries/url/#lb_url_encode-url","text":"Return a percent-encoded url. Parameters: Name Type Description Default url string The url to encode required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /url\" function main () { url = \"http://user:pw@example.com:80/some/path/url?data&and#hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_get_domain \" ${ url } \" ) printf \"lb_get_domain: %s\\n\" \" ${ s } \" s = $( lb_url_encode \" ${ url } \" ) printf \"lb_url_encode: %s\\n\" \" ${ s } \" url = \"http%3A%2F%2Fuser%3Apw%40example.com%3A80%2Fsome%2Fpath%2Furl%3Fdata%26and%23hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_url_decode \" ${ url } \" ) printf \"lb_url_decode: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in url 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_get_domain () { lb_check_args_num \" ${ @ } \" 1 # https://unix.stackexchange.com/a/428990/93726 echo \" ${ 1 } \" | sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\" | sed \"s/^www\\.//\" | cut -f 1 -d '.' } function lb_url_encode (){ lb_check_args_num \" ${ @ } \" 1 local LC_ALL = C for (( i = 0 ; i < ${# 1 } ; i++ )) ; do : \" ${ 1 : i : 1 } \" case \" $_ \" in [ a-zA-Z0-9.~_- ]) printf '%s' \" $_ \" ;; * ) printf '%%%02X' \"' $_ \" ;; esac done printf '\\n' } function lb_url_decode () { lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 //+/ } \" printf '%b\\n' \" ${ _ //%/ \\\\ x } \" }","title":"lb_url_encode url"},{"location":"libraries/url/#lb_url_decode-url","text":"Return a percent-decoded url. Parameters: Name Type Description Default url string The url to decode required Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env bash # shellcheck source=/dev/null source ../init source \" ${ LIBBASH_DIR } /url\" function main () { url = \"http://user:pw@example.com:80/some/path/url?data&and#hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_get_domain \" ${ url } \" ) printf \"lb_get_domain: %s\\n\" \" ${ s } \" s = $( lb_url_encode \" ${ url } \" ) printf \"lb_url_encode: %s\\n\" \" ${ s } \" url = \"http%3A%2F%2Fuser%3Apw%40example.com%3A80%2Fsome%2Fpath%2Furl%3Fdata%26and%23hash\" printf \"url: %s\\n\" \" ${ url } \" s = $( lb_url_decode \" ${ url } \" ) printf \"lb_url_decode: %s\\n\" \" ${ s } \" } main \" ${ @ } \" Show source code in url 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env bash : \" ${ LIBBASH_DIR :?LIBBASH_DIR must be set. Please source libbash/init before other libraries. } \" #------------------------------ Global Variables ------------------------------ #------------------------------ Private Functions ----------------------------- #------------------------------ Public Functions ------------------------------ function lb_get_domain () { lb_check_args_num \" ${ @ } \" 1 # https://unix.stackexchange.com/a/428990/93726 echo \" ${ 1 } \" | sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\" | sed \"s/^www\\.//\" | cut -f 1 -d '.' } function lb_url_encode (){ lb_check_args_num \" ${ @ } \" 1 local LC_ALL = C for (( i = 0 ; i < ${# 1 } ; i++ )) ; do : \" ${ 1 : i : 1 } \" case \" $_ \" in [ a-zA-Z0-9.~_- ]) printf '%s' \" $_ \" ;; * ) printf '%%%02X' \"' $_ \" ;; esac done printf '\\n' } function lb_url_decode () { lb_check_args_num \" ${ @ } \" 1 : \" ${ 1 //+/ } \" printf '%b\\n' \" ${ _ //%/ \\\\ x } \" }","title":"lb_url_decode url"}]}